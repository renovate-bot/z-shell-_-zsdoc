local ret=$?
if [[ $WIDGET == zle-isearch-update ]] && { $zsh_highlight__pat_static_bug || ! (( $+ISEARCHMATCH_ACTIVE )) }; then
  region_highlight=()
  return $ret
fi

setopt localoptions warncreateglobal
setopt localoptions noksharrays
local REPLY
[[ -n ${ZSH_HIGHLIGHT_MAXLENGTH:-} ]] && [[ $#BUFFER -gt $ZSH_HIGHLIGHT_MAXLENGTH ]] && return $ret
[[ $PENDING -gt 0 ]] && return $ret
typeset -ga region_highlight
region_highlight=();

{
  local cache_place
  local -a region_highlight_copy
  local highlighter; for highlighter in $ZSH_HIGHLIGHT_HIGHLIGHTERS; do
    cache_place="_zsh_highlight__highlighter_${highlighter}_cache"
    typeset -ga ${cache_place}
    if ! type "_zsh_highlight_highlighter_${highlighter}_predicate" >&/dev/null; then
      echo "zsh-syntax-highlighting: warning: disabling the ${(qq)highlighter} highlighter as it has not been loaded" >&2
      ZSH_HIGHLIGHT_HIGHLIGHTERS=( ${ZSH_HIGHLIGHT_HIGHLIGHTERS:#${highlighter}} )
    elif "_zsh_highlight_highlighter_${highlighter}_predicate"; then
      region_highlight_copy=("${region_highlight[@]}")
      region_highlight=()
      {
        "_zsh_highlight_highlighter_${highlighter}_paint"
      } always {
        eval "${cache_place}=(\"\${region_highlight[@]}\")"
      }
      region_highlight=("${region_highlight_copy[@]}")

    fi
    eval "region_highlight+=(\"\${${cache_place}[@]}\")"

  done
  if (( REGION_ACTIVE == 1 )); then
    _zsh_highlight_apply_zle_highlight region standout "$MARK" "$CURSOR"
  elif (( REGION_ACTIVE == 2 )); then
    () {
      local needle=$'\n'
      integer min max
      if (( MARK > CURSOR )) ; then
        min=$CURSOR max=$MARK
      else
        min=$MARK max=$CURSOR
      fi
      (( min = ${${BUFFER[1,$min]}[(I)$needle]} ))
      (( max += ${${BUFFER:($max-1)}[(i)$needle]} - 1 ))
      _zsh_highlight_apply_zle_highlight region standout "$min" "$max"
    }
  fi
  (( $+YANK_ACTIVE )) && (( YANK_ACTIVE )) && _zsh_highlight_apply_zle_highlight paste standout "$YANK_START" "$YANK_END"
  (( $+ISEARCHMATCH_ACTIVE )) && (( ISEARCHMATCH_ACTIVE )) && _zsh_highlight_apply_zle_highlight isearch underline "$ISEARCHMATCH_START" "$ISEARCHMATCH_END"
  (( $+SUFFIX_ACTIVE )) && (( SUFFIX_ACTIVE )) && _zsh_highlight_apply_zle_highlight suffix bold "$SUFFIX_START" "$SUFFIX_END"


  return $ret


} always {
  typeset -g _ZSH_HIGHLIGHT_PRIOR_BUFFER="$BUFFER"
  typeset -gi _ZSH_HIGHLIGHT_PRIOR_CURSOR=$CURSOR
}
