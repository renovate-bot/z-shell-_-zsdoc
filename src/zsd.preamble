#!/usr/bin/env sh
# -*- Mode: sh; sh-indentation: 2; indent-tabs-mode: nil; sh-basic-offset: 2; -*-
# vim:ft=zsh:sw=2:sts=2:et
#
# This file is double-licensed under GPLv3 and MIT (see LICENSE file)

#
# /bin/sh stage, load configuration to obtain $zsh_control_bin
#

ZERO="$0"
ZSD_DIR="${ZERO%/*}"

if [ "${ZSD_DIR}" = "${ZSD_DIR#/}" ]; then
  ZSD_DIR="${PWD}/${ZSD_DIR}"
fi

if [ "${ZSD_CONFIG}" = "" ]; then
  if [ -f "${XDG_CONFIG_HOME:-${HOME}/.config}"/zsdoc/zsd.config ]; then
    ZSD_CONFIG="${XDG_CONFIG_HOME:-${HOME}/.config}/zsdoc/zsd.config"
  elif [ -f "${ZSD_DIR}/zsd.config" ]; then
    ZSD_CONFIG="${ZSD_DIR}/zsd.config"
  elif [ -f /usr/local/share/zsdoc/zsd.config ]; then
    ZSD_CONFIG="/usr/local/share/zsdoc/zsd.config"
  elif [ -f /usr/share/zsdoc/zsd.config ]; then
    ZSD_CONFIG="/usr/share/zsdoc/zsd.config"
  elif [ -f /opt/share/zsdoc/zsd.config ]; then
    ZSD_CONFIG="/opt/share/zsdoc/zsd.config"
  fi

  if [ "x${ZSD_CONFIG}" != "x" ]; then
    [ "$1" != -q ] && [ "$2" != -q ] && [ "$3" != -q ] &&
      [ "$1" != -r ] && [ "$2" != -r ] && [ "$3" != -r ] &&
      echo "Reading configuration from: ${ZSD_CONFIG}"
    export ZSD_CONFIG
    [ -f "${ZSD_CONFIG}" ] && . "${ZSD_CONFIG}"
  fi
else
  [ -f "${ZSD_CONFIG}" ] && . "${ZSD_CONFIG}"
fi

if [ -z "${zsh_control_bin}" ]; then
  zsh_control_bin="zsh"
fi

if [ -z "${ZSH_VERSION}" ]; then
  args="\"$0\""
  for arg; do
    args="${args} \"${arg}\""
  done
  exec /usr/bin/env "${zsh_control_bin}" -f -c "source ${args}"
fi

local -A colors fg bg fg_bold bg_bold
autoload colors
colors

builtin setopt extended_glob typeset_silent

### Functions ###
usage() {
  cat <<EOF

  $fg[green]Usage:${reset_color} zsd [$fg[magenta]-h/--help${reset_color}] [$fg[magenta]-v/--verbose${reset_color}] [$fg[magenta]-q/--quiet${reset_color}] [$fg[magenta]-n/--noansi${reset_color}] [$fg[magenta]--cignore <pattern>${reset_color}] <$fg_bold[cyan]file1${reset_color}> <$fg_bold[cyan]file2${reset_color}>

  $fg[green]Options:${reset_color}

  $fg[magenta]-h/--help${reset_color}      Usage information
  $fg[magenta]-v/--verbose${reset_color}   More verbose operation-status output
  $fg[magenta]-q/--quiet${reset_color}     No status messages
  $fg[magenta]-n/--noansi${reset_color}    No colors in terminal output
  $fg[magenta]--cignore${reset_color}      Specify which comment lines should be ignored
  $fg[magenta]-f/--fpath${reset_color}     Paths separated by : pointing to directories with functions
  $fg[magenta]--synopsis${reset_color}     Text to be used in SYNOPSIS section. Line break "... +\n", paragraph "...\n\n"
  $fg[magenta]--blocka${reset_color}       String used as block-begin, default: {{{
  $fg[magenta]--blockb${reset_color}       String used as block-end, default: }}}
  $fg[magenta]--scomm${reset_color}        Strip comment char "#" from function comments
  $fg[magenta]--bash${reset_color}         Output slightly tailored to Bash specifics (instead of Zsh specifics)

  $fg[green]Example --cignore options:${reset_color}

  $fg[magenta]--cignore${reset_color} '\\#*FUNCTION:*{{{*'                  - ignore comments like: $fg[cyan]# FUNCTION: usage {{{${reset_color}
  $fg[magenta]--cignore${reset_color} '(\\#*FUNCTION:*{{{*|\\#*FUN:*{{{*)'   - also ignore comments like: $fg[cyan]# FUN: usage {{{${reset_color}

  $fg[green]File is parsed for synopsis block, which can be e.g.:${reset_color}

  # synopsis {{{my synopsis, can be multi-line}}}

  $fg[green]An example block:${reset_color}
  $fg[cyan]
  # env-vars {{{
  # PATH -> paths to executables
  # MANPATH -> paths to manuals }}}
  ${reset_color}
  $fg[green]Notes:${reset_color}

  - Files processed/generated in subdirectory \`zsdoc' (with meta-data in subdirectory \`data').
  - Change the default brace block-delimiters with --blocka, --blockb. Block body should be AsciiDoc.
EOF
}
