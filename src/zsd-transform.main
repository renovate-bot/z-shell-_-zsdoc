# vim:ft=zsh:et:sw=2
#
# This file is double-licensed under GPLv3 and MIT (see LICENSE file)

### Options ###

local OPT_HELP OPT_VERBOSE OPT_QUIET OPT_NOANSI
local -A opthash
zparseopts -E -D -A opthash h -help v -verbose q -quiet r -really-quiet n -noansi || { echo "Improper options given, see help (-h/--help)"; return 1; }

(( ${+opthash[-h]} + ${+opthash[--help]} ))     && OPT_HELP=-h
(( ${+opthash[-v]} + ${+opthash[--verbose]} ))  && OPT_VERBOSE=-v
(( ${+opthash[-q]} + ${+opthash[--quiet]} ))    && OPT_QUIET=-q
(( ${+opthash[-r]} + ${+opthash[--really-quiet]} )) && { OPT_QUIET=-q; OPT_RQUIET=-r; }
(( ${+opthash[-n]} + ${+opthash[--noansi]} ))   && OPT_NOANSI=-n

[[ -n $OPT_NOANSI ]] && { colors=(); fg=(); bg=(); fg_bold=(); bg_bold=(); reset_color=; }

[[ -z $OPT_QUIET ]] && print "$fg[cyan]== zsd-transform starting for file \`$fg_bold[yellow]$1$fg_no_bold[cyan]' (1-st pass)$reset_color"

if [[ -n $OPT_HELP ]]; then
    usage
    return 0
fi

if [[ $# -le 0 || $* = [[:space:]]## ]]; then
    print "Argument needed, see help (-h/--help)"
    return 1
fi

if [[ ! -f $1 ]]; then
    [[ -z $OPT_QUIET || -n $OPT_VERBOSE ]] && print "$fg[magenta]File \`$1' doesn't exist, skipping it (see help, with -h/--help option)$reset_color"
    return 1
fi

if [[ ! -r $1 ]]; then
    [[ -z $OPT_QUIET || -n $OPT_VERBOSE ]] && print "$fg[magenta]File \`$1' is unreadable, skipping it (see help, with -h/--help option)$reset_color"
    return 1
fi

### Code ###

local name=${1:t} nl=$'\n'
local doc="$(<$1)" token prev_token= spaces prev_spaces= next_token next_spaces

local preamble= preamble_comment= fun_name= hook=
local -A funs auto_funs myhooks myexports
local -a arr

# Function extraction
integer at_command=1 in_autoload=0 in_azh=0 in_export=0
integer next_fun=0 cur_fun=0 prev_fun=0
integer depth=0 prev_depth=0 fun_depth=-1 anon_depth=-1 descentff=0 descentfa=0

# Nested functions tracking
integer nested_fun=0 next_nested_fun=0 prev_nested_fun=0
local -a fun_stack_depths

line_count()
{
    local -a list
    list=( "${(@f)1}" )
    local count=${#list}
    [[ $1 = *$'\n' ]] && (( -- count ))
    print -r -- "${(l:3:: :)count}"
}


zsd-process-buffer $doc 1
integer i size=${#ZSD_PB_WORDS}

for (( i=1; i<=size; ++ i )); do
    token=${ZSD_PB_WORDS[i]}
    spaces=${ZSD_PB_SPACES[i]}
    next_token=${ZSD_PB_WORDS[i+1]}
    next_spaces=${ZSD_PB_SPACES[i+1]}

    cur_fun=0 prev_fun=0 descentff=0 descentfa=0
    nested_fun=0 prev_nested_fun=0

    (( next_fun )) && { next_fun=0 cur_fun=1 prev_fun=0 anon_depth=-1; }
    (( next_nested_fun )) && { next_nested_fun=0 nested_fun=1 prev_nested_fun=0; }

    # Explicit future-function
    if [[ $token = function && ( $fun_depth -lt 0 ) && ( $anon_depth -lt 0 ) ]]; then
        next_fun=1 cur_fun=0 prev_fun=0 anon_depth=-1
    # (Detect function if not already in function)
    # Detect top-level prev-function differentiating from anonymous function
    elif [[ $token = "()" && ( $fun_depth -lt 0 ) && ( $anon_depth -lt 0 ) ]]; then
        if [[ $spaces = *$'\n'* || -z $prev_token || ${TOKEN_TYPES[$prev_token]} = [1234] ]]; then
            next_fun=0 cur_fun=0 prev_fun=0 anon_depth=$depth
        else
            next_fun=0 cur_fun=0 prev_fun=1 anon_depth=-1
        fi
    # Must be a nested future-function
    elif [[ $token = function ]]; then
        next_nested_fun=1 nested_fun=0 prev_nested_fun=0
    # Is it a nested prev-function?
    elif [[ $token = "()" && $nested_fun -eq 0 && $depth -gt $fun_stack_depths[-1] ]]; then
        if [[ $spaces != *$'\n'* && -n $prev_token && ${TOKEN_TYPES[$prev_token]} != [1234] ]]; then
            next_nested_fun=0 nested_fun=0 prev_nested_fun=1
        fi
    elif [[ $token = "{" ]]; then
        (( ++ depth ))
    elif [[ $token = "}" ]]; then
        (( -- depth ))
    fi

    # Check if any final function-flag is raised
    if (( cur_fun )); then
        fun_name=$token
        fun_depth=$depth
        fun_stack_depths+=( $depth )
    elif (( prev_fun )); then
        fun_name=$prev_token
        fun_depth=$depth
        fun_stack_depths+=( $depth )
    fi

    # Track nested functions
    if (( nested_fun + prev_nested_fun )); then
        fun_stack_depths+=( $depth )
    fi

    # Ascent to function - skip '{'
    if (( fun_depth >= 0 && depth == (fun_depth + 1) )) && [[ $token = "{" ]]; then
        :
    # In function
    elif (( fun_depth >= 0 && depth > fun_depth )); then
        if [[ $token != [[:blank:]]#\#* ]]; then
            funs[$fun_name]+=${spaces}${token}
        fi
        # Handle descent from nested function
        if (( ${#fun_stack_depths} > 0 && depth == fun_stack_depths[-1] && prev_depth == fun_stack_depths[-1] + 1 )); then
            fun_stack_depths[-1]=()
        fi
    # In anonymous-function
    elif (( anon_depth >= 0 && depth > anon_depth )); then
        if (( ${#fun_stack_depths} > 0 && depth == fun_stack_depths[-1] && prev_depth == fun_stack_depths[-1] + 1 )); then
            fun_stack_depths[-1]=()
        fi
    # Descent from function - skip '}'
    elif (( fun_depth >= 0 && depth == fun_depth && prev_depth == fun_depth + 1 )); then
        descentff=1
    # Descent from anon
    elif (( anon_depth >= 0 && depth == anon_depth && prev_depth == anon_depth + 1 )); then
        descentfa=1
    fi

    # Anon function in top-level
    if (( anon_depth >= 0 && fun_depth < 0 )); then
        [[ $token != [[:blank:]]#\#* ]] && preamble+=${spaces}${token} || preamble_comment+=${spaces}${token}
    fi

    ### Detect function call
    # Check for introduction of autoload function
    if [[ $spaces = *$'\n'* || -z $prev_token || ${TOKEN_TYPES[$prev_token]} = [1234] ]]; then
        if [[ $spaces != [[:blank:]]#"\\"(|$'\r')$'\n'[[:blank:]]# || ${TOKEN_TYPES[$prev_token]} = [1234] ]]; then
            at_command=1
            in_autoload=0
            in_azh=0
            in_export=0
        fi
    fi
    if (( at_command )); then
        at_command=0
        if [[ $cur_fun -eq 0 && $next_token != "()" && $fun_stack_depths[-1] -le 0 ]]; then
            if [[ $token = autoload ]]; then
                in_autoload=1
            elif [[ $token = add-zsh-hook ]]; then
                in_azh=1
            elif [[ $token = export ]]; then
                in_export=1
            fi
        fi
    elif (( in_autoload )); then
        if [[ $token = -- ]]; then
            in_autoload=2
        elif [[ $token != -* || $in_autoload -eq 2 ]]; then
            arr=( $^fpath/$token(N) )
            if [[ ${#arr} -ge 1 ]]; then
                auto_funs[$token]="$(<${arr[1]})"
            #else
            #    auto_funs[$token]="Autoload-function source not found"
            fi
        fi
    elif (( in_azh )); then
        if (( in_azh == 1 )); then
            if [[ $token = -- ]]; then
                # Defer increment of in_azh
                :
            elif [[ $token = -* ]]; then
                in_azh=0
            else
                in_azh=2
            fi
        else
            myhooks[${token%$'\r'}]=$prev_token
            in_azh=0
        fi
    elif (( in_export )); then
        if [[ $token = (#b)([a-zA-Z_][a-zA-Z0-9_]#)(=(*))(#c0,1) ]]; then
            [[ -z $fun_name ]] && local fkey=zsd_script_body || local fkey=$fun_name
            [[ ${myexports[$fkey]} != *[[:blank:]]${match[1]}[[:blank:]]* ]] && myexports[$fkey]+=" ${match[1]} "
        fi
    fi

    # Late disable of anonymous function
    if (( descentfa )); then
        anon_depth=-1
    # Late disable of normal function
    elif (( descentff )); then
        fun_name=
        fun_depth=-1
        fun_stack_depths[-1]=()
    # No-function text gathering
    elif (( next_fun == 0 && cur_fun == 0 && prev_fun == 0 && anon_depth < 0 && fun_depth < 0 )); then
        if [[ $next_token != "()" || $next_spaces = *$'\n'* || ${TOKEN_TYPES[$token]} = [34] ]]; then
            [[ $token != [[:blank:]]#\#* ]] && preamble+=${spaces}${token} || preamble_comment+=${spaces}${token}
        fi
    fi

    # History of state
    prev_depth=$depth
    prev_token=$token
    prev_spaces=$spaces
done

### OUTPUT: FUNCTIONS

command mkdir -p zsdoc/data/functions/$name/${fun_name:h}

for fun_name in "${(ko@)funs}"; do
    [[ -z $OPT_QUIET ]] && print "Extracted `line_count ${funs[$fun_name]}`-line function \`$fg[green]${fun_name}$reset_color'..."
    {
        zsd-trim-indent ${funs[$fun_name]}
        print -r -- $REPLY
    } >| zsdoc/data/functions/$name/$fun_name
done

### OUTPUT: HOOKS

command mkdir -p zsdoc/data/hooks/$name

for hook in "${(k)myhooks[@]}"; do
    print -r -- ${myhooks[$hook]} >| zsdoc/data/hooks/$name/$hook
done

### OUTPUT: EXTENDED BODY

command mkdir -p zsdoc/data/extended/${name:h}
command rm -f zsdoc/data/extended/$name
print -r -- $doc >| zsdoc/data/extended/$name

### OUTPUT: AUTOLOAD FUNCTIONS AND EXTENDED BODY

for fun_name in "${(ko@)auto_funs}"; do
    command mkdir -p zsdoc/data/autoload/$name/${fun_name:h}

    [[ -z $OPT_QUIET ]] && print "Extracted `line_count ${auto_funs[$fun_name]}`-line $fg[red]AUTOLOAD$reset_color function \`$fg[green]${fun_name}$reset_color'..."
    # Autoload function
    zsd-trim-indent ${auto_funs[$fun_name]}
    print -r -- $REPLY >| zsdoc/data/autoload/$name/$fun_name

    # Appendix of the function to extended body
    print "\n" >>| zsdoc/data/extended/$name
    arr=( "${(@f)${(M)REPLY##(#s)([[:space:]]#\#[^$nl]#$nl)##}}" )
    print -r -- ${(F)arr[1,10]} >>| \
                zsdoc/data/extended/$name
    print -r -- "${fun_name}() {" >>| zsdoc/data/extended/$name
    print -r -- $REPLY >>| zsdoc/data/extended/$name
    print -r -- "}" >>| zsdoc/data/extended/$name
done

### OUTPUT: SCRIPT BODIES

command mkdir -p zsdoc/data/bodies

print -r -- $preamble >| zsdoc/data/bodies/${name}
print -r -- $preamble_comment >| zsdoc/data/bodies/${name}.comments
[[ -z $OPT_QUIET ]] && print "$fg[yellow]Generated body of script \`$name\'$reset_color (`line_count $preamble` lines)"

### OUTPUT: EXPORTED VARS

command mkdir -p zsdoc/data/exports/$name

local -a exps
local exp holder
for fun_name in "${(ko@)myexports}"; do
    if [[ $fun_name = zsd_script_body ]]; then
        holder=zsdoc/data/exports/$name/Script_Body_
    else
        holder=zsdoc/data/exports/$name/$fun_name
    fi

    command mkdir -p $holder

    exps=( "${(z@)myexports[$fun_name]}" )
    for exp in "${(o)exps[@]}"; do
        echo >| $holder/$exp
    done
done

return 0
